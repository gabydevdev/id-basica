/**
 * Mixins
 *
 * This file contains SCSS mixins used throughout the theme.
 */

@use 'sass:color';
@use 'sass:map';

@use 'variables' as *;

// Media Query Breakpoints using the breakpoints map from _variables.scss
@mixin breakpoint-up($breakpoint) {
	@if map.has-key($breakpoints, $breakpoint) {
		@media (min-width: map.get($breakpoints, $breakpoint)) {
			@content;
		}
	}

	@else {
		@error "Unknown breakpoint `#{$breakpoint}`. Available breakpoints are: #{map.keys($breakpoints)}";
	}
}

@mixin breakpoint-down($breakpoint) {
	@if map.has-key($breakpoints, $breakpoint) {
		// Subtracting 0.02px to avoid overlap between breakpoints
		$max-width: map.get($breakpoints, $breakpoint) - 0.02px;

		@media (max-width: $max-width) {
			@content;
		}
	}

	@else {
		@error "Unknown breakpoint `#{$breakpoint}`. Available breakpoints are: #{map.keys($breakpoints)}";
	}
}

// Additional media query mixins for more flexibility
@mixin breakpoint-between($lower, $upper) {
	@if map.has-key($breakpoints, $lower) and map.has-key($breakpoints, $upper) {
		$min-width: map.get($breakpoints, $lower);
		$max-width: map.get($breakpoints, $upper) - 0.02px;

		@media (min-width: $min-width) and (max-width: $max-width) {
			@content;
		}
	}

	@else {
		@error "Unknown breakpoint: `#{$lower}` or `#{$upper}`. Available breakpoints are: #{map.keys($breakpoints)}";
	}
}

@mixin breakpoint-only($breakpoint) {
	@if map.has-key($breakpoints, $breakpoint) {
		$breakpoint-keys: map.keys($breakpoints);
		$breakpoint-index: index($breakpoint-keys, $breakpoint);
		$next-breakpoint: null;

		@if $breakpoint-index < length($breakpoint-keys) {
			$next-breakpoint: nth($breakpoint-keys, $breakpoint-index + 1);

			@include breakpoint-between($breakpoint, $next-breakpoint) {
				@content;
			}
		}

		@else {
			@include breakpoint-up($breakpoint) {
				@content;
			}
		}
	}

	@else {
		@error "Unknown breakpoint `#{$breakpoint}`. Available breakpoints are: #{map.keys($breakpoints)}";
	}
}

// Flexbox utilities
@mixin flex-center {
	display: flex;
	align-items: center;
	justify-content: center;
}

@mixin flex-between {
	display: flex;
	align-items: center;
	justify-content: space-between;
}

@mixin flex-column {
	display: flex;
	flex-direction: column;
}

// Typography helpers
@mixin text-truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin line-clamp($lines) {
	display: -webkit-box;
	-webkit-line-clamp: $lines;
	-webkit-box-orient: vertical;
	overflow: hidden;
}

// Transitions
@mixin transition($property: all, $duration: 0.2s, $timing: ease-in-out) {
	transition: $property $duration $timing;
}

// Accessibility helpers
@mixin visually-hidden {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border-width: 0;
}

// Focus styles
@mixin focus-ring {
	outline: 2px solid var(--color-primary);
	outline-offset: 2px;
}

// Card styles
@mixin card {
	background-color: var(--color-background-card);
	border-radius: var(--border-radius);
	box-shadow: var(--box-shadow-sm);
	padding: var(--spacing-4);
}

// Dashboard grid
@mixin dashboard-grid {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
	gap: var(--grid-gap);
}

// Sidebar transitions
@mixin sidebar-transition {
	transition: width 0.3s ease, transform 0.3s ease, margin-left 0.3s ease;
}

// CSS Variable Color Utilities
// This creates a darker version of a color that is defined with CSS variables
@mixin color-darken($property, $color-var, $amount) {
	// Define fallback colors for common variables
	$fallback-colors: (
		'--color-success': #28a745,
		'--color-error': #dc3545,
		'--color-primary': #4361ee,
		'--color-secondary': #6c757d,
		'--color-warning': #ffc107,
		'--color-info': #17a2b8
	);

	@if map.has-key($fallback-colors, $color-var) {
		$base-color: map.get($fallback-colors, $color-var);
		#{$property}: color.adjust($base-color, $lightness: -$amount * 1%);
	} @else {
		// If color not in map, use a filter as fallback
		#{$property}: var(#{$color-var});
		filter: brightness(#{1 - $amount/100});
	}
}

// This creates a lighter version of a color that is defined with CSS variables
@mixin color-lighten($property, $color-var, $amount) {
	// Define fallback colors for common variables
	$fallback-colors: (
		'--color-success': #28a745,
		'--color-error': #dc3545,
		'--color-primary': #4361ee,
		'--color-secondary': #6c757d,
		'--color-warning': #ffc107,
		'--color-info': #17a2b8
	);

	@if map.has-key($fallback-colors, $color-var) {
		$base-color: map.get($fallback-colors, $color-var);
		#{$property}: color.adjust($base-color, $lightness: $amount * 1%);
	} @else {
		// If color not in map, use a filter as fallback
		#{$property}: var(#{$color-var});
		filter: brightness(#{1 + $amount/100});
	}
}
